import { db } from "../config/db-client.js";
import { sessionsTable, short_links, usersTable, verifyEmailTokensTable } from "../drizzle/schema.js";
import { and, eq,gte,lt, sql } from "drizzle-orm";
import argon2 from "argon2";
import jwt from "jsonwebtoken";
import {
  ACCESS_TOKEN_EXPIRY,
  MILLISECONDS_PER_SECOND,
  REFRESH_TOKEN_EXPIRY,
} from "../config/constants.js";
import crypto from "crypto";
import { sendEmail } from "../lib/nodemailer.js";
export const getUserByEmail = async (email) => {
  const [user] = await db
    .select()
    .from(usersTable)
    .where(eq(usersTable.email, email));
  return user;
};

export const createUser = async ({ name, email, password }) => {
  return await db
    .insert(usersTable)
    .values({ name, email, password })
    .$returningId();
};

export const hashPassword = async (password) => {
  return await argon2.hash(password);
};

export const comparePassword = async (hash, password) => {
  return await argon2.verify(hash, password);
};

// token generating service
export const generateToken = ({ id, name, email }) => {
  return jwt.sign({ id, name, email }, process.env.JWT_SECRET, {
    expiresIn: "30d",
  });
};

//verify JWT TOKEN
export const verifyJWTToken = (token) => {
  return jwt.verify(token, process.env.JWT_SECRET);
};

export const createSession = async (userId, { ip, userAgent }) => {
  const [session] = await db
    .insert(sessionsTable)
    .values({ userId, ip, userAgent })
    .$returningId();
  return session;
};

//finding Sesion by Id
export const findSessionById = async (sessionId) => {
  const [session] = await db
    .select()
    .from(sessionsTable)
    .where(eq(sessionsTable.id, sessionId));
  return session;
};

//Finding User by Id
export const findUserById = async (userId) => {
  const [user] = await db
    .select()
    .from(usersTable)
    .where(eq(usersTable.id, userId));
  return user;
};
//createAccessToken
export const createAccessToken = ({ id, name, email, sessionId, isEmailValid }) => {
  console.log("JWT_SECRET in createAccessToken:", process.env.JWT_SECRET ? "***SET***" : "UNDEFINED");
  return jwt.sign({ id, name, email, sessionId, isEmailValid }, process.env.JWT_SECRET, {
    expiresIn: ACCESS_TOKEN_EXPIRY / MILLISECONDS_PER_SECOND, //expires in "15m"
  });
};
export const createRefreshToken = ({ sessionId }) => {
  return jwt.sign({ sessionId }, process.env.JWT_SECRET, {
    expiresIn: REFRESH_TOKEN_EXPIRY / MILLISECONDS_PER_SECOND, //expires in "15m"
  });
};

export const refreshTokens = async (refreshToken) => {
  try {
    const decodedToken = verifyJWTToken(refreshToken); //isse mujhe session id mil jaayegi jisse me find out kruga aage ka
    const currentSession = await findSessionById(decodedToken.sessionId);

    if (!currentSession || !currentSession.valid) {
      throw new Error("Invalid Session!");
    }

    const user = await findUserById(currentSession.userId);

    if (!user) throw new Error("Invalid User!");

    const userInfo = {
      id: user.id,
      name: user.name,
      email: user.email,
      isEmailValid:user.isEmailValid,
      sessionId: currentSession.id, 
    };

    //creating the tokens
    const newAccessToken = createAccessToken(userInfo);

    const newRefreshToken = createRefreshToken({ sessionId: currentSession.id }); // Fixed: pass object

    return {
      newAccessToken,
      newRefreshToken,
      user: userInfo,
    };
  } catch (error) {
    console.log("Error in refreshTokens:", error.message);
    throw error; // Re-throw the error so middleware can handle it
  }
};

//clearing the session post logout
export const clearSession=async(sessionId)=>{
  return db.delete(sessionsTable)
            .where(eq(sessionsTable.id,sessionId));

}

//Login with tokens 
export const authenticateUser= async ({req, res, user, name, email})=>{
  const session = await createSession(user.id,{
          ip:req.clientIp,
          userAgent:req.headers["user-agent"],
      });
  
      const accessToken= createAccessToken({
          id:user.id,
          name:user.name||name,// ye name wo data me tha toh isliye lgaa and user.name for the second parts's usage 
          email:user.email||email,
          isEmailValid:user.isEmailValid,
          sessionId:session.id,
      });
      const refreshToken= createRefreshToken({sessionId:session.id});
  
      const baseConfig ={httpOnly:true,secure:true}; // for the sale of ease, declaring a var here and will use in both the functions
  
      res.cookie("access_token",accessToken,{
          ...baseConfig,
          maxAge:ACCESS_TOKEN_EXPIRY,
      });
  
      res.cookie("refresh_token",refreshToken,{
          ...baseConfig,
          maxAge:REFRESH_TOKEN_EXPIRY,
      });
}

//getting all the shortlinks generated by the user
export const getAllShortLinks=async(userId)=>{
  return await db.select()
                  .from(short_links)
                  .where(eq(short_links.id,userId));
}

export const generateRandomToken = async(digit=8)=>{
  const min= 10**(digit-1);
  const max=10**digit;

  return crypto.randomInt(min,max).toString();
}

// insertVerifyEmailToken
export const insertVerifyEmailToken = async({userId,token})=>{

  return db.transaction( async(tx)=>{

  try {
    console.log("Inserting the token in to DB");
  await tx.delete(verifyEmailTokensTable)
          .where(lt(verifyEmailTokensTable.expiresAt, sql`CURRENT_TIMESTAMP`));

  //delete the existing the tokens for this specific user
  await tx
          .delete(verifyEmailTokensTable)
          .where(eq(verifyEmailTokensTable.userId,userId));
          
 await tx.insert(verifyEmailTokensTable).values({userId,token});
 console.log("Insertion completed into the DB!");
 
  } catch (error) {
    console.log("Unable to insert into DB", error);
    console.error(error);
  }
  })
}

//createVerifyEmailLink
// export const createVerifyEmailLink= async({email,token})=>{
//     const uriEncodedEmail= encodeURIComponent(email);
//     const generatedURL= `${process.env.FRONTEND_URL}/verify-email-token?token=${token}&email=${uriEncodedEmail}`;
//     console.log("The generated URL is ", generatedURL);
//     return generatedURL;
// }

//: URL API
// The URL API in JavaScript provides a way to parse, construct, and manipulate URLs.
// It includes the URL constructor for creating URL objects, which allow access to components like protocol, hostname, pathname, search, and hash.
// Example: const url = new URL('https://example.com/path?query=value');
// This is useful for handling URLs in web applications, such as generating verification links or parsing request URLs.

//* Why to use URL API
/**
 * Easier URL Conctsruction
 * Automatic Encoding
 * Better Readibility
 */

//Creating the verify email link in using the URL API

export const createVerifyEmailLink= async({email,token})=>{
    const url=new URL(`${process.env.FRONTEND_URL}/verify-email-token`)
    url.searchParams.append("token",token);
    url.searchParams.append("email",email);

    const generatedLink=url.toString();
    console.log("The genrated link: ",generatedLink);
    return generatedLink;
}

// export const findVerificationEmailToken=async({token, email})=>{
//   //.select({key:table.column}) -> Method to select data in the drizzle
//   const tokenData =await db.select({
//     userId:verifyEmailTokensTable.userId,
//     token:verifyEmailTokensTable.token,
//     expiresAt:verifyEmailTokensTable.expiresAt,
//   })
//   .from(verifyEmailTokensTable)
//   .where(
//     and(
//       //dono hi condiction full fill ho
//       eq(verifyEmailTokensTable.token,token),
//       gte(verifyEmailTokensTable.expiresAt,sql`CURRENT_TIMESTAMP`)
//     )
//     //expiry date greater hona chaiye
//   );

//   if(!tokenData.length){
//     return null;
//   }
//   // const{userId}= tokenData[0];
//   const userId= tokenData[0].userId; //since driizzle array return krta hai objects ka toh isliye

//   const userData= await db.select({
//     userId:usersTable.id,
//     email:usersTable.email,
//   })
//   .from(usersTable)
//   .where(eq(usersTable.id,userId));


//   if(!userData.length){
//     return null;
//   }

//   return{
//     userId:userData[0].userId,
//     email:userData[0].email,
//     token:userData[0].token,
//     expiresAt:userData[0].expiresAt,
//   }
// }

// Instead of above longcode, we are using the sql Joins

export const findVerificationEmailToken=async({token, email})=>{
  //.select({key:table.column}) -> Method to select data in the drizzle
  const rows = await db
    .select({
      userId: usersTable.id,
      email: usersTable.email,
      token: verifyEmailTokensTable.token,
      expiresAt: verifyEmailTokensTable.expiresAt,
    })
    .from(verifyEmailTokensTable)
    .innerJoin(usersTable, eq(verifyEmailTokensTable.userId, usersTable.id))
    .where(
      and(
        eq(verifyEmailTokensTable.token, token),
        eq(usersTable.email, email),
        gte(verifyEmailTokensTable.expiresAt, sql`CURRENT_TIMESTAMP`)
      )
    );

  // Drizzle returns an array of rows. Return a single object or null so callers don't need to handle arrays.
  if (!rows || rows.length === 0) return null;
  return rows[0];
}

export const findVerificationEmailAndUpdate=async(email)=>{
    return db
        .update(usersTable)
        .set({isEmailValid:true})
        .where(eq(usersTable.email,email));
};

export const clearVerifyEmailTokens=async(email)=>{
    const [user]=await db.select()
                        .from(usersTable)
                        .where(eq(usersTable.email,email));
  if(!user) return 0;

  return await db.delete(verifyEmailTokensTable)
          .where(eq(verifyEmailTokensTable.userId, user.id))
}

export  const sendNewVerifyEmailLink=async({userId,email})=>{
  const randomToken = await generateRandomToken();
      console.log("random token is:",randomToken);
      
      await insertVerifyEmailToken({userId, token:randomToken});
  
      const verifyEmailLink= await createVerifyEmailLink({
          email:email,
          token:randomToken
      });
  
      try {
          const emailResult = await sendEmail({
              to:email,
              subject:"verify your email",
              html:`
              <p>Click the link below to verify your email:</p>
              <a href="${verifyEmailLink}">Verify Email</a>
              <p>Or you can use this token: <strong>${randomToken}</strong></p>
              <a href="${verifyEmailLink}"> Verify Email </a>        
              `
          });
          console.log("Email sent successfully:", emailResult);
      } catch (error) {
          console.error("Failed to send email:", error);
          req.flash("errors", "Failed to send verification email. Please try again.");
          return res.redirect("/profile");
      }
  
}